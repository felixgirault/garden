---
import {Image} from 'astro:assets';
import type {Album} from '../services/albums';
import headphonesIcon from './icons/headphones.svg?raw';
import headphonesOffIcon from './icons/headphones-off.svg?raw';
import deezerIcon from './icons/deezer.svg?raw';
import spotifyIcon from './icons/spotify.svg?raw';

interface Props {
	album: Album;
}

const {album} = Astro.props;
const {
	title,
	artist,
	description,
	cover,
	preview,
	deezerId,
	spotifyId
} = album;
---

<article itemscope itemtype="https://schema.org/MusicAlbum">
	<header>
		<h1 itemprop="name">{title}</h1>

		<p
			itemprop="byArtist"
			itemscope
			itemtype="https://schema.org/MusicGroup"
		>
			By <span itemprop="name">{artist}</span>
		</p>

		{
			description ? (
				<p itemprop="description">{description}</p>
			) : null
		}
	</header>

	<aside class="Reflection">
		<Image
			class="Backdrop"
			src={cover}
			alt=""
			loading="eager"
			itemprop="image"
		/>
	</aside>

	<ul class="List--raw List--inline">
		<li>
			<button
				class="Album-previewButton"
				title="Listen to a preview of a song"
				data-toggled-title="Stop listening to the song"
			>
				<span class="Album-previewOff">
					<Fragment set:html={headphonesIcon} />
					Preview
				</span>
				<span class="Album-previewOn">
					<Fragment set:html={headphonesOffIcon} />
					Stop preview
				</span>
			</button>

			<audio class="Album-audio" src={preview} preload="none">
			</audio>
		</li>

		{
			deezerId ? (
				<li>
					<a
						class="Button"
						href={`https://www.deezer.com/album/${deezerId}`}
						title="Listen on Deezer"
						set:text="Deezer"
					>
						<Fragment set:html={deezerIcon} />
					</a>
				</li>
			) : null
		}
		{
			spotifyId ? (
				<li>
					<a
						class="Button"
						href={`https://open.spotify.com/album/${spotifyId}`}
						title="Listen on Spotify"
						set:text="Spotify"
					>
						<Fragment set:html={spotifyIcon} />
					</a>
				</li>
			) : null
		}
	</ul>
</article>

<script>
	const audio =
		document.querySelector<HTMLAudioElement>('.Album-audio')!;
	const previewButton =
		document.querySelector<HTMLButtonElement>(
			'.Album-previewButton'
		)!;

	const togglePreviewButton = () => {
		previewButton.classList.toggle('is-playing');
		const title = previewButton.dataset.toggledTitle!;
		previewButton.dataset.toggledTitle = previewButton.title;
		previewButton.title = title;
	};

	previewButton.addEventListener('click', () => {
		if (previewButton.classList.contains('is-playing')) {
			audio.pause();
			audio.currentTime = 0;
		} else {
			audio.play();
		}

		togglePreviewButton();
	});

	audio.addEventListener('ended', () => {
		audio.currentTime = 0;
		togglePreviewButton();
	});
</script>

<style>
	article {
		display: grid;
		grid-template:
			'header'
			'aside'
			'body';
		align-items: start;
		justify-items: center;
		gap: 0 4ch;
		margin-block-end: var(--block-spacing);
		text-align: center;
	}

	@media screen and (min-width: 80ch) {
		article {
			grid-template:
				'header aside' min-content
				'body aside' 1fr
				/ 2fr 1fr;
			justify-items: start;
			text-align: start;
		}
	}

	header {
		grid-area: header;
	}

	ul {
		grid-area: body;
	}

	aside {
		grid-area: aside;
		margin-bottom: 1lh;
	}

	h1 {
		margin-block-end: 0.25rlh;
	}

	[itemprop='byArtist'] {
		padding-inline-start: 0.5ch;
		font-family: var(--font-serif);
		font-style: italic;
	}

	.Album-previewButton span {
		display: contents;
	}

	.Album-previewButton .Album-previewOn {
		display: none;
	}

	.Album-previewButton.is-playing .Album-previewOn {
		display: contents;
	}

	.Album-previewButton.is-playing .Album-previewOff {
		display: none;
	}
</style>
