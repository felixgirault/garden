<fglt-playlist>
	<ol></ol>

	<template>
		<li>
			<button class="play" title="" data-id="">â–º</button>
			<span class="title"></span>
			<span class="artist"></span>
		</li>
	</template>
</fglt-playlist>

<style>
	li {
		display: grid;
		grid-template:
			'play title'
			'play artist'
			/ min-content 1fr;
		gap: 0 1ch;
		margin-bottom: 1em;
	}

	.play {
		grid-area: play;
		align-self: center;
	}

	.title {
		grid-area: title;
		line-height: 1.2;
	}

	.artist {
		grid-area: artist;
		color: var(--color-neutral);
		line-height: 1.2;
		font-family: var(--font-serif);
		font-size: var(--font-size-s);
	}
</style>

<script>
	type PlaylistTrack = {
		id: string;
		title: string;
		artist: string;
	};

	export class Playlist extends HTMLElement {
		#list!: HTMLUListElement;
		#itemTemplate!: HTMLTemplateElement;
		#tracks: PlaylistTrack[] = [];

		connectedCallback() {
			this.#list =
				this.querySelector<HTMLOListElement>('ol')!;
			this.#itemTemplate =
				this.querySelector<HTMLTemplateElement>('template')!;

			this.addEventListener('click', (event) => {
				if (event.target instanceof HTMLButtonElement) {
					this.dispatchEvent(
						new CustomEvent('play', {
							detail: event.target.dataset.id
						})
					);
				}
			});
		}

		setTracks(tracks: PlaylistTrack[]) {
			this.#tracks = tracks;
			this.#render();
		}

		nextTrack(trackId: string) {
			const index = this.#tracks.findIndex(
				({id}) => id === trackId
			);

			return index < 0
				? undefined
				: this.#tracks.at(index + 1);
		}

		#render() {
			this.#list.innerHTML = '';
			this.#list.append(
				...this.#tracks.map(this.#renderItem, this)
			);
		}

		#renderItem({id, title, artist}: PlaylistTrack) {
			const result = this.#itemTemplate.content.cloneNode(
				true
			) as DocumentFragment;

			const play =
				result.querySelector<HTMLButtonElement>('.play')!;

			play.setAttribute('title', `Play ${title}`);
			play.dataset.id = id;

			result.querySelector('.title')!.innerHTML = title;
			result.querySelector('.artist')!.innerHTML =
				`by ${artist}`;

			return result;
		}
	}

	customElements.define('fglt-playlist', Playlist);
</script>
