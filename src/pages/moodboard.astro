---
import {getCollection} from 'astro:content';
import Layout from '../layouts/Layout.astro';
import Section from '../components/Section.astro';
import DrawingBoard from '../components/DrawingBoard.astro';
import SpotifyPlayer from '../components/SpotifyPlayer.astro';
import Playlist from '../components/Playlist.astro';

const trackCollection = await getCollection('moodboardTracks');
const tracks = trackCollection.map(({id, data}) => ({
	id,
	...data
}));

const presets = {
	Chill: [
		[0.6, 0.1],
		[0.9, 0.1]
	],
	Energetic: [
		[0.8, 0.9],
		[0.9, 0.9]
	],
	Progressive: [
		[0, 0],
		[0.2, 0.1],
		[0.8, 0.9],
		[1, 1]
	],
	Random: []
};

declare global {
	interface Window {
		moodboardTracks: typeof tracks;
	}
}
---

<Layout theme="dark" title="Moodboard" breadcrumbs={[]}>
	<h1>Moodboard</h1>

	<p>Draw yourself a playlist! üñåÔ∏è</p>

	<p>
		{tracks.length} tracks are laid out in the board below.
		<br />
		They are arranged according to their perceived happiness and
		energy, from saddest on the left to happiest on the right, from
		calmer at the bottom to hotter at the top.
	</p>

	<p>
		Some presets are available below for you to get an idea of
		how this works.
	</p>

	<ul class="List--inline">
		{
			Object.entries(presets).map(([label, path]) => (
				<li>
					<button data-preset={JSON.stringify(path)}>
						{label}
					</button>
				</li>
			))
		}
	</ul>

	<Section isWide>
		<DrawingBoard />
	</Section>

	<SpotifyPlayer />
	<Playlist />
</Layout>

<script is:inline define:vars={{tracks}}>
	window.moodboardTracks = tracks;
</script>

<script>
	import type {DrawingBoard} from '../components/DrawingBoard.astro.0.mts';
	import type {Playlist} from '../components/Playlist.astro.0.mts';
	import type {SpotifyPlayer} from '../components/SpotifyPlayer.astro.0.mts';
	import {randomPoints, type Point} from '../services/2d';
	import {MoodboardTrackSpace} from '../services/moodboard';

	const space = new MoodboardTrackSpace(window.moodboardTracks);
	const playlist =
		document.querySelector<Playlist>('fglt-playlist')!;
	const player = document.querySelector<SpotifyPlayer>(
		'fglt-spotify-player'
	)!;
	const board = document.querySelector<DrawingBoard>(
		'fglt-drawing-board'
	)!;

	board.addEventListener('drawend', ((e: CustomEvent) => {
		const tracks = space
			.searchAlongPath(e.detail)
			.filter((track) => !!track);

		playlist.setTracks(tracks);
		board.setPoints(
			tracks.map(({valence, energy}) => [valence, energy])
		);
	}) as EventListener);

	playlist.addEventListener('play', ((e: CustomEvent) => {
		player.play(e.detail);
	}) as EventListener);

	player.addEventListener('playbackend', ((e: CustomEvent) => {
		const next = playlist.nextTrack(e.detail);

		if (next) {
			player.play(next.id);
		}
	}) as EventListener);
	document
		.querySelectorAll<HTMLButtonElement>('[data-preset]')
		.forEach((button) => {
			button.addEventListener('click', () => {
				const path = JSON.parse(
					button.dataset.preset!
				) as Point[];

				board.setCurve(path.length ? path : randomPoints());
			});
		});
</script>
